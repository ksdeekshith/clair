---
name: Nightly

on:
  push:
    branches:
      - test
  workflow_dispatch:
    inputs:
      branch:
        description: 'Claircore branch to reference'
        required: false
      go_version:
        description: 'Go version to be used throughout'
        required: false
      tag:
        description: 'Tag to push resulting image to'
        required: false
  schedule:
    - cron: '30 5 * * *'

jobs:
  build:
    name: Build and Push container
    runs-on: 'ubuntu-latest'
    steps:
      - name: Setup
        id: setup
        env:
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
#           QUAY_API_TOKEN: ${{ secrets.QUAY_API_TOKEN }}
        # This step uses defaults written in the shell script instead of the
        # nicer workflow inputs so that the cron trigger works.
        run: |
          br=$(test -n "${{github.event.inputs.branch}}" && echo "${{github.event.inputs.branch}}" || echo main)
          gv=$(test -n "${{github.event.inputs.go_version}}" && echo "${{github.event.inputs.go_version}}" || echo 1.20)
          : "${repo:=$GITHUB_REPOSITORY}"
          test "${repo%%/*}" = quay && repo="projectquay/${repo##*/}" ||:
          cat <<. >>$GITHUB_OUTPUT
          push=${{ env.QUAY_TOKEN != '' }}
          api=${{ env.QUAY_API_TOKEN != '' }}
          date=$(date -u '+%Y-%m-%d')
          tag=$(test -n "${{github.event.inputs.tag}}" && echo "${{github.event.inputs.tag}}" || echo nightly)
          claircore_branch=${br}
          go_version=${gv}
          repo=${repo}
          .
          # Environment variables
          printf 'CLAIRCORE_BRANCH=%s\n' "${br}" >> $GITHUB_ENV
          printf 'GO_VERSION=%s\n' "$gv" >> $GITHUB_ENV
          printf '%s/.local/go/bin\n' "$HOME" >> $GITHUB_PATH
      - name: Install IBMCLI
        run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      - name: IBM Cloud Login
        run: ibmcloud login -q --apikey ${{ secrets.IBMCLOUD_API_KEY }} -r eu-gb
      - name: Install VPC CLI plug-in
        run: ibmcloud plugin install vpc-infrastructure
      - name: Creation of ZVSI
        id: ZVSI
        run: |
          #creation of zvsi
          ibmcloud is instance-create $ZVSI_INSTANCE_NAME $ZVSI_VPC $ZVSI_ZONE_NAME $ZVSI_PROFILE_NAME $ZVSI_SUBNET --image $ZVSI_IMAGE --keys $ZVSI_KEY --resource-group-id $ZVSI_RG_ID
          #Reserving a floating ip to the ZVSI
          ibmcloud is floating-ip-reserve $ZVSI_FP_NAME --zone $ZVSI_ZONE_NAME --resource-group-id $ZVSI_RG_ID --in $ZVSI_INSTANCE_NAME
          #Bouding the Floating ip to the ZVSI
          ibmcloud is floating-ip-update $ZVSI_FP_NAME --nic primary --in $ZVSI_INSTANCE_NAME
          sleep 20

          #Saving the Floating IP to login ZVSI
          ZVSI_HOST=$(ibmcloud is floating-ip $ZVSI_FP_NAME | awk '/Address/{print $2}')
          echo $ZVSI_HOST
          echo "IP=${ZVSI_HOST}" >> $GITHUB_OUTPUT
      - name: Setup SSH config for builders
        env:
          BUILDER_S390X_SSH_HOST: ${{ steps.ZVSI.outputs.IP }}
          BUILDER_S390X_SSH_KEY: ${{ secrets.ZVSI_PR_KEY }}
        run: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/id_builder_s390x
          chmod 600 ~/.ssh/id_builder_s390x
          echo "$BUILDER_S390X_SSH_KEY" > ~/.ssh/id_builder_s390x
          touch ~/.ssh/config
          chmod 600 ~/.ssh/config
          cat >~/.ssh/config <<END
          Host builder-s390x
            StrictHostKeyChecking no
            HostName $BUILDER_S390X_SSH_HOST
            User root
            IdentityFile "~/.ssh/id_builder_s390x"
          END
          cat ~/.ssh/config
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/ppc64le
      - name: setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64, linux/arm64, linux/ppc64le
          append: |
            - endpoint: ssh://builder-s390x
              platforms: linux/s390x
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.setup.outputs.go_version }}
          check-latest: true
      - uses: actions/checkout@v3
        with:
          repository: quay/clair
          fetch-depth: 0
      - uses: ./.github/actions/go-cache
        with:
          go: ${{ steps.setup.outputs.go_version }}
      - id: mod
        run: ./.github/script/nightly-module.sh
      - id: novelty
        uses: actions/cache@v3
        with:
          path: go.sum
          key: novelty-${{ github.sha }}-${{ hashFiles('./go.*') }}
      - uses: docker/login-action@v2
        if: steps.setup.outputs.push && steps.novelty.outputs.cache-hit != 'true'
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Export
        # This exports the current state of the main branch, and appends our modified go module files.
        run: |
          mkdir "${{ runner.temp }}/build"
          git archive --add-file=go.mod --add-file=go.sum origin/main |
            tar -x -C "${{ runner.temp }}/build"
      - uses: docker/build-push-action@v4
        with:
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ runner.temp }}/build
          platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
          push: ${{ steps.setup.outputs.push && steps.novelty.outputs.cache-hit != 'true' }}
          tags: |
            quay.io/${{ steps.setup.outputs.repo }}:${{ steps.setup.outputs.tag }}
            quay.io/${{ steps.setup.outputs.repo }}:${{ steps.setup.outputs.tag }}-${{ steps.setup.outputs.date }}
#       - uses: ./.github/actions/set-image-expiration
#         if: steps.setup.outputs.push && steps.setup.outputs.api && steps.novelty.outputs.cache-hit != 'true'
#         with:
#           repo: ${{ steps.setup.outputs.repo }}
#           tag: ${{ steps.setup.outputs.tag }}-${{ steps.setup.outputs.date }}
#           token: ${{ secrets.QUAY_API_TOKEN }}
      - name: Post Build-and-publish-s390x
        if: ${{ steps.ZVSI.conclusion == 'success' && always() }}
        run: |
          #Delete the created ZVSI
          ibmcloud is instance-delete $ZVSI_INSTANCE_NAME --force
          sleep 20

          #Release the created FP
          ibmcloud is floating-ip-release $ZVSI_FP_NAME --force
